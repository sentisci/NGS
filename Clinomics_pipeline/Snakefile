#Load python modules
import itertools
import os
import collections
import pprint
import time
from snakemake.utils import R
from snakemake.exceptions import MissingInputException

# Environment variable for serpentine base directory location
try:
    SERPENTINE_HOME=os.environ['SERPENTINE_HOME']
    NOW=os.environ['NOW']
    RESULT_DIR=os.environ['RESULT_DIR']
    WORKING_DIR=os.environ['WORKING_DIR']
except KeyError:
    SERPENTINE_HOME="/projects/Clinomics/Tools/serpentine_Tgen_working/"
    #NOW=time.strftime("%d_%m_%Y")
    NOW="02_04_16"
    pass

#Basic utility functions
def _get_rule_path(rule_file_path):
    "Combines the serpentine base directory with serpentine rule paths"
    return(os.path.join(SERPENTINE_HOME,rule_file_path))

#Include all config files
configfile: _get_rule_path("cluster.json")
configfile: _get_rule_path("config.json")
configfile: _get_rule_path("version.json")
configfile: _get_rule_path("samplesheet.json")

#Include all rule files
#include: _get_rule_path("alignment.rules")

#Store Entity in Dicts
#START####Basic dicts###################################################
UNIT_TO_LIBRARY = {}
for lib,units in config['libraries'].items():
	for unit in units:
	        UNIT_TO_LIBRARY[unit]=lib

LIBRARY_TO_SAMPLE  = {}
for sample,libs in config['samples'].items():
	for lib in libs:
        	LIBRARY_TO_SAMPLE[lib]=sample

SAMPLE_TO_SUBJECT  = {}
for subject,samples in config['subjects'].items():
	for sample in samples:
        	SAMPLE_TO_SUBJECT[sample]=subject

SUBJECT_TO_STUDY  = {}
for study,subjects in config['studies'].items():
	for subject in subjects:
		SUBJECT_TO_STUDY[subject]=study

#END################################################################

#START## Forward one step #########################################
UNIT_TO_SAMPLE = {}
for unit in config['units'].keys():
	UNIT_TO_SAMPLE[unit]=LIBRARY_TO_SAMPLE[UNIT_TO_LIBRARY[unit]]

UNIT_TO_SUBJECT = {}
for unit in config['units'].keys():
    	UNIT_TO_SUBJECT[unit]=SAMPLE_TO_SUBJECT[LIBRARY_TO_SAMPLE[UNIT_TO_LIBRARY[unit]]]

UNIT_TO_STUDY = {}
for unit in config['units'].keys():
    	UNIT_TO_STUDY[unit]=SUBJECT_TO_STUDY[SAMPLE_TO_SUBJECT[LIBRARY_TO_SAMPLE[UNIT_TO_LIBRARY[unit]]]]
#END# ############################################################


#START## BAckward one step ######################################
LIBRARY_TO_UNIT = collections.defaultdict(list)
for unit,sample in UNIT_TO_LIBRARY.items():
        LIBRARY_TO_UNIT[sample].append(unit)

SAMPLE_TO_UNIT = collections.defaultdict(list)
for unit,sample in UNIT_TO_SAMPLE.items():
    	SAMPLE_TO_UNIT[sample].append(unit)

SUBJECT_TO_UNIT = collections.defaultdict(list)
for unit,subject in UNIT_TO_SUBJECT.items():
    	SUBJECT_TO_UNIT[subject].append(unit)

SUBJECT_TO_SAMPLE = collections.defaultdict(list)
for sample,subject in SAMPLE_TO_SUBJECT.items():
        SUBJECT_TO_SAMPLE[subject].append(sample)

STUDY_TO_UNIT = collections.defaultdict(list)
for unit,study in UNIT_TO_STUDY.items():
    	STUDY_TO_UNIT[study].append(unit)

#END ##########################################################

###Making BAM & QC files
SUBJECT_list = ["{subject}".format(subject=s) for s in config['subjects'].keys()]

ALL_QC_files=[];Genotype_files={}
BAM_extensions = [".bam",".tdf"]
for qc_ext in BAM_extensions:
	format_string = "SUBJECT/{subject}/"+NOW+"/{sample}/{reference_name}.{aligner}/bam/{sample}.{aligner}.final"+qc_ext
	file=[format_string.format(subject=SAMPLE_TO_SUBJECT[s], sample=s, reference_name=config['reference_name'], aligner=config['aligner']['bwamem']) for s in config['samples'].keys() ]
	ALL_QC_files.append(file)

QC_metric_extensions = [".bam.depth_per_base",".bam.hsmetrics",".bam.hotspot.depth",".bam.flagstat",".bam.qualimapReport.html",".bam.consolidated_QC",".bam.failExons"]
for qc_ext in QC_metric_extensions:
	if(qc_ext == ".bam.qualimapReport.html"):	
		format_string = "SUBJECT/{subject}/"+NOW+"/{sample}/{reference_name}.{aligner}/qc/bamqc/{sample}.{aligner}.final"+qc_ext
	else:
		format_string = "SUBJECT/{subject}/"+NOW+"/{sample}/{reference_name}.{aligner}/qc/{sample}.{aligner}.final"+qc_ext
	file=[format_string.format(subject=SAMPLE_TO_SUBJECT[s], sample=s, reference_name=config['reference_name'], aligner=config['aligner']['bwamem']) for s in config['samples'].keys() ]
	ALL_QC_files.append(file)

ALL_QC_files.append( ["SUBJECT/{subject}/{now}/{sample}/{reference_name}.{aligner}/qc/fastqc/{unit}_R1_fastqc.html".format(now=NOW, sample=UNIT_TO_SAMPLE[s], subject=UNIT_TO_SUBJECT[s], unit=s, reference_name=config['reference_name'], aligner=config['aligner']['bwamem']) for s in config['units'].keys()])

##Genotyping
gt_string_sample= "SUBJECT/{subject}/"+NOW+"/{sample}/{reference_name}.{aligner}/qc/Genotype/{sample}.{aligner}.final.bam.gt"
gt_string_subject="SUBJECT/{subject}/"+NOW+"/Genotype/{subject}.genotyping.txt"
Genotype_files["sample"]=[] ; Genotype_files["subject"]=[];
Genotype_files["sample"]=[gt_string_sample.format(subject=SAMPLE_TO_SUBJECT[s], sample=s, reference_name=config['reference_name'], aligner=config['aligner']['bwamem']) for s in config['samples'].keys() ]
Genotype_files["subject"]=[gt_string_subject.format(subject=s) for s in config['subjects'].keys()]
#print(Genotype_files)


###Making pairs for Somatic Callers
somaticPairs = {}
PairsCapture = {}

if len(config['sample_references']) > 0:
	for Tumor in config['sample_references']:
		for Normal in config['sample_references'][Tumor]:
			TumorBam="SUBJECT/{subject}/{now}/{sample}/{reference_name}.{aligner}/bam/{sample}.{aligner}.final".format(now=NOW, subject=SAMPLE_TO_SUBJECT[Tumor],sample=Tumor,reference_name=config['reference_name'],aligner=config['aligner']['bwamem'])
			NormalBam =  "SUBJECT/{subject}/{now}/{sample}/{reference_name}.{aligner}/bam/{sample}.{aligner}.final".format(now=NOW, subject=SAMPLE_TO_SUBJECT[Normal],sample=Normal,reference_name=config['reference_name'],aligner=config['aligner']['bwamem'])
			PairsCapture[Tumor] = config['sample_captures'][Tumor]
			somaticPairs[Tumor] = [NormalBam + ".bam" , NormalBam + ".bai", TumorBam + ".bam", TumorBam + ".bai"]

#snpEff Annotation
SUBJECT_list = ["{subject}".format(subject=s) for s in config['subjects'].keys()]
SUBJECT_ANNO = dict([(key, {}) for key in SUBJECT_list])
#print(SUBJECT_ANNO)

def add_to_SUBJECT_ANNO(subject, group, file_list):
	file_list_ext_change = [w.replace('snpEff', 'annotated') for w in file_list]
	if group not in SUBJECT_ANNO[subject]:
		SUBJECT_ANNO[subject][group] = file_list_ext_change
	else:
		SUBJECT_ANNO[subject][group].extend(file_list_ext_change)

##Make Subject level Somatic , Germline & Genotype files
ALL_snpEff_germline  = [] ; ALL_snpEff_somatic  = [] ; ALL_SUBJECT_VCFS = {}; ALL_SUBJECT_GENOTYPE = {} 
reference_name=config['reference_name'] ; aligner=config['aligner']['bwamem']
germline_callers_list = ["haplotypecaller","platypus","bam2mpg","freebayes"]

for subject in config["subjects"].keys():
	ALL_SUBJECT_VCFS[subject]=[]
	ALL_SUBJECT_GENOTYPE[subject]=[]
	samples = SUBJECT_TO_SAMPLE[subject]
	for sample in samples:
		ALL_SUBJECT_GENOTYPE[subject].append("SUBJECT/"+subject+"/"+NOW+"/"+sample+"/"+reference_name+"."+aligner+"/qc/Genotype/"+sample+"."+aligner+".final.bam.gt")
		for caller in germline_callers_list:
			if(caller != "bam2mpg"):
				ALL_SUBJECT_VCFS[subject].append("SUBJECT/"+subject+"/"+NOW+"/"+sample+"/"+reference_name+"."+aligner+"/"+caller+"/"+sample+"."+aligner+"."+caller+".snpEff.txt")
			else:
				ALL_SUBJECT_VCFS[subject].append("SUBJECT/"+subject+"/"+NOW+"/"+sample+"/"+reference_name+".novoalign/"+caller+"/"+sample+".novoalign."+caller+".snpEff.txt")
	ALL_snpEff_germline.extend(ALL_SUBJECT_VCFS[subject])
	add_to_SUBJECT_ANNO(subject,"germline",ALL_SUBJECT_VCFS[subject])	

##print(ALL_SUBJECT_GENOTYPE)

if len(config['sample_references']) > 0:
	for sample in config['sample_references'].keys():
		subject=SAMPLE_TO_SUBJECT[sample]
	        if subject in ALL_SUBJECT_VCFS:
			temp_list = [ 			("SUBJECT/"+subject+"/"+NOW+"/"+sample+"/"+reference_name+"."+aligner+"/mutect/"+sample+"."+aligner+".mutect.snpEff.txt"),
							("SUBJECT/"+subject+"/"+NOW+"/"+sample+"/"+reference_name+"."+aligner+"/strelka/"+sample+"."+aligner+".strelka.snvs.snpEff.txt"),
                                                        ("SUBJECT/"+subject+"/"+NOW+"/"+sample+"/"+reference_name+"."+aligner+"/strelka/"+sample+"."+aligner+".strelka.indels.snpEff.txt")
                                    ]
			ALL_snpEff_somatic.extend(temp_list)
			ALL_SUBJECT_VCFS[subject].extend(temp_list)
			add_to_SUBJECT_ANNO(subject,"somatic",temp_list)
		else:
			print("Seems like there is no Germline caller for "+subject)
				

varFiles=[]
DBFiles =[]
ActionableFiles =[]


#print(config['sample_references'])
#print(SUBJECT_ANNO)
for subject in SUBJECT_ANNO.keys():
	for group in SUBJECT_ANNO[subject].keys():
		DBFiles +=["SUBJECT/"+subject+"/"+NOW+"/Annotation/db/"+subject+"."+group]
		ActionableFiles +=["SUBJECT/"+subject+"/"+NOW+"/Actionable/"+subject+"."+group+".actionable.txt"]
		for varFile in SUBJECT_ANNO[subject][group]:
			varFiles.append(varFile)

#print(DBFiles)
#print(ActionableFiles)
#print(varFiles)

ALL_snpEff_vcf = ALL_snpEff_germline + ALL_snpEff_somatic
Attach_ASP_Annotation = [w.replace('snpEff', 'annotated') for w in ALL_snpEff_vcf]
##CombineAnnotation = [w.replace('docm','annotations.final.txt') for w in Annot_ALL] 


SUBJECT_toprint = ["{subject}\n".format(subject=s) for s in config['subjects'].keys()]
#test_input = "batch_out.txt"
rule final:
	input:
		ALL_QC_files,
		Genotype_files["sample"],
		Genotype_files["subject"],
		"Genotyping_done",
		Attach_ASP_Annotation,
		DBFiles,
		ActionableFiles
		#test_input
	output: 
		temp("success")
	params:
                batch   ="-l nodes=1:ppn=1,mem=2gb"
	shell:	"""
		chmod -R 750 {WORKING_DIR}		
		chgrp -R clinomics {WORKING_DIR}
		chmod -R 770 {WORKING_DIR}/.snakemake 
		echo -e "Hi,\nClinomics pipeline, processed following Subjects on TGen Server. \n{SUBJECT_toprint}\n Please check and  verify result folders and files in \n {WORKING_DIR}\n\nThanks,\nTeam Clinomics" |/bin/mail -s "Clinomics Pipeline finished"  `whoami`@mail.nih.gov
		touch success
	"""

#Include all rule files
include: _get_rule_path("alignment.rules")
