rule bwamem_map:
	input:
		index = lambda wildcards: config['align_algo_index']['bwa']+config['bwa']+"/"+config['reference_name']+".pac",
		fastq = lambda wildcards: config['units'][wildcards.unit]
	output:
		bam= "{unit}.bam",
		bai= "{unit}.bam.bai"
	version: 
		config['bwa']
	params:
        	rulename 		= "bwamem_map",
		sample			= lambda wildcards:     UNIT_TO_SAMPLE[wildcards.unit],
        	library 		= lambda wildcards:	UNIT_TO_LIBRARY[wildcards.unit],
        	platform 		= config['platform'],
        	bwa_index 		= lambda wildcards: config['align_algo_index']['bwa']+config['bwa']+"/"+config['reference_name'],
		adapters		= config['adapters'],
		samtools_version	= config['samtools'],
		ea_utils_version	= config['ea_utils'],
        	batch			= config['alignment_clust']['bwa']
	log:	"{unit}.log"
    	shell:	"""
	
	module load bwa/{version}
	module load samtools/{params.samtools_version}
	module load ea-utils/{params.ea_utils_version}
	
	R1={input.fastq[0]}
	R2={input.fastq[1]}
	mcf_log={wildcards.unit}.mcf_log	

	##fastq-mcf -C 1000000 -q 2 -p 10 -u -x 20 -o $R1 -o $R2 {params.adapters} <(gunzip -c {input.fastq[0]}) <(gunzip -c {input.fastq[1]}) > $mcf_log 2>&1
	bwa mem -M  -t 16 -R "@RG\tID:{wildcards.unit}\tSM:{params.sample}\tLB:{params.library}\tPL:Illumina" {params.bwa_index} $R1 $R2 2> {log}| samtools view -Sbh - |samtools sort -m 30000000000 - {wildcards.unit}	
	
	#indexing BAM file
	samtools index {wildcards.unit}.bam
		"""


rule markdups:
	input:	
		bam="{unit}.bam",
		bai="{unit}.bam.bai"
	output:
		bam="{unit}.md.bam",
		bai="{unit}.md.bam.bai",
		metrics="{unit}.bam.dupmetrics"
	version:
		config['picard']
	params:
		rulename	= "markdups",
		picard_version	= config['picard'],
		batch		= config['picard_clust']['picard_md']
	log:	"{unit}.md.bam.log"
	shell:	"""
	
	module load picard/{version}
	
	java -Xmx16g -Djava.io.tmpdir=/projects/scratch/ -jar /apps/picard/{version}/picard.jar MarkDuplicates AS=true M={output.metrics} O={output.bam} I={input.bam} REMOVE_DUPLICATES=false VALIDATION_STRINGENCY=SILENT > {log} 2>&1
	
	samtools index {output.bam}	
		"""

rule flagstat:
	input:
		bam="{sample}.final.bam",
		bam_bai="{sample}.final.bai"
	output:
		"{sample}.final.bam.flagstat"
	version:
		config['samtools']
	params:
		rulename	= "flagstat",
		batch		= config['flagstat_clust']
	log:	"{sample}.flagstat.log"
	shell:	"""
	
	module load samtools/{version}
	
	samtools flagstat {input.bam} > {output} 2> {log}
		
		"""

rule mergeBams:
	input:
		bam=lambda wildcards:	expand("{unit}.md.bam", unit = SAMPLE_TO_UNIT[wildcards.sample]),
	output:
        	bam="{sample}.merge.bam",
		bai="{sample}.merge.bam.bai"
	version:
		config['picard']
	params:
		rulename	= "mergeBams",
		batch		= config['picard_clust']['picard_md']
	log:	"{sample}.merge.bam.log"
	run:
		inputBams = ' '.join(['I={bam}'.format(bam=bam) for bam in input])
		print(inputBams)
		shell("""
			module load picard/{version}
			java -Xmx16g -Djava.io.tmpdir=/projects/scratch/ -jar /apps/picard/{version}/picard.jar  MergeSamFiles AS=true USE_THREADING=true VALIDATION_STRINGENCY=SILENT {inputBams} O={output.bam} 2>> {log}
			samtools index {output.bam}
		""")

rule gatk_realigner_target_creator:
	input:
		bam="{sample}.merge.bam",
                phase1=config['resources']['knownIndels']['phase1'],
                mills=config['resources']['knownIndels']['mills'],
                reference=config['reference_fasta'][config['reference_name']]
	output:
		ri="{sample}.realignment.intervals"
	version:
                config['gatk']
	params:
                rulename        = "gatk_realigner_target_creator",
                batch           = config['gatk_clust']
	log:
                "{sample}.gatk.realigner_target.log"
	shell:  """

        module load GATK/{version}
        module load java

        java -Djava.io.tmpdir=/projects/scratch/ -jar /apps/GATK/{version}/GenomeAnalysisTK.jar -T RealignerTargetCreator -R {input.reference} -known {input.phase1} -known {input.mills} -I {input.bam} -o {output.ri} -nt 8 >{log} 2>&1
		"""		

rule gatk_IndelRealigner:
	input:
		bam="{sample}.merge.bam",	
		ri="{sample}.realignment.intervals",
                phase1=config['resources']['knownIndels']['phase1'],
                mills=config['resources']['knownIndels']['mills'],
                reference=config['reference_fasta'][config['reference_name']]
	output:
		lr_bam="{sample}.lr.bam"
	version:
                config['gatk']
	params:
                rulename        = "gatk_IndelRealigner",
                batch           = config['gatk_clust']
	log:
                "{sample}.gatk.IndelRealigner.log"
	shell:  """

        module load GATK/{version}
        module load java
	
	java -Djava.io.tmpdir=/projects/scratch/ -jar /apps/GATK/{version}/GenomeAnalysisTK.jar -T IndelRealigner -R {input.reference}  -known {input.phase1} -known {input.mills} -I {input.bam} --targetIntervals {input.ri} -o {output.lr_bam} >>{log} 2>&1	

		"""

rule gatk_BaseRecalibrator:
	input:
		lr_bam="{sample}.lr.bam",
                phase1=config['resources']['knownIndels']['phase1'],
                mills=config['resources']['knownIndels']['mills'],
                reference=config['reference_fasta'][config['reference_name']]
	output:
		rmat="{sample}.recalibration.matrix.txt"
	version:
                config['gatk']
	params:
                rulename        = "gatk_BaseRecalibrator",
                batch           = config['gatk_clust']
	log:
                "{sample}.gatk.BaseRecalibrator.log"
	shell:  """

        module load GATK/{version}
        module load java

	java -Djava.io.tmpdir=/projects/scratch/ -jar /apps/GATK/{version}/GenomeAnalysisTK.jar -T BaseRecalibrator -R {input.reference} -knownSites {input.phase1} -knownSites {input.mills} -I {input.lr_bam} -o {output.rmat} >>{log} 2>&1	
		"""

rule gatk_PrintReads:
	input:
                lr_bam="{sample}.lr.bam",
		rmat="{sample}.recalibration.matrix.txt",
                reference=config['reference_fasta'][config['reference_name']]
	output:
                bam="{sample}.final.bam",
                index="{sample}.final.bai"
	version:
                config['gatk']
	params:
                rulename        = "gatk_PrintReads",
                batch           = config['gatk_clust']
	log:
                "{sample}.gatk.PrintReads.log"
	shell:  """

        module load GATK/{version}
        module load java

	java -Djava.io.tmpdir=/projects/scratch/ -jar /apps/GATK/{version}/GenomeAnalysisTK.jar -T PrintReads -R {input.reference} -I {input.lr_bam} -o {output.bam} -BQSR {input.rmat} >>{log} 2>&1				
		"""

rule HaplotypeCaller:
	input:
		bam="{sample}.final.bam",
		bai="{sample}.final.bai"
	output:	
		vcf="{sample}.haplotypecaller.raw.vcf"
	version:
		config['gatk']
	params:
		rulename	="HaplotypeCaller",
		reference	=config['reference_fasta'][config['reference_name']],
		dbsnp		=config["resources"]["dbsnp"],
		target_intervals=lambda wildcards: config['target_intervals'][config['sample_captures'][wildcards.sample][0]],
		batch           = config['gatk_clust']
		
	log :	
		"{sample}.haplotypecaller.raw.vcf.log"
	shell: """
	module load GATK/{version}
			
	gawk '{{print $1 "\t" $2-1 "\t" $3}}' {params.target_intervals} > /projects/scratch/target_intervals.bed
	java -Djava.io.tmpdir=/projects/scratch/ -jar /apps/GATK/{version}/GenomeAnalysisTK.jar  -T HaplotypeCaller -R {params.reference} -I {input.bam} -L /projects/scratch/target_intervals.bed -o {output.vcf} --dbsnp {params.dbsnp} -mbq 20 -log {log}
	
	       """

rule freebayes:
        input:
                bam="{sample}.final.bam",
                bai="{sample}.final.bai"
        output:
                vcf="{sample}.freebayes.raw.vcf"
        version:
                config['freebayes']
        params:
                rulename        ="Freebayes",
                reference       =config['reference_fasta'][config['reference_name']],
                dbsnp           =config["resources"]["dbsnp"],
                target_intervals=lambda wildcards: config['target_intervals'][config['sample_captures'][wildcards.sample][0]],
                batch           = config['freebayes_clust']

        log :
                "{sample}.freeayes.raw.vcf.log"
        shell: """
        module load freebayes/{version}
	module load vcftools/{version}

        gawk '{{print $1 "\t" $2-1 "\t" $3}}' {params.target_intervals} > /projects/scratch/target_intervals.bed
        freebayes -f {params.reference} --haplotype-length 50 -b {input.bam} -v {output} > {log} 2>&1

	vcftools --vcf {output} --bed /lscratch/${{SLURM_JOBID}}/target_intervals.bed --out {output} --recode --keep-INFO-all
	mv {output}.recode.vcf {output.vcf}
               """

rule platypus:
        input:
                bam="{sample}.final.bam",
                bai="{sample}.final.bai"
        output:
                vcf="{sample}.platypus.raw.vcf"
        version:
                config['platypus']
        params:
                rulename        ="Platypus",
                reference       =config['reference_fasta'][config['reference_name']],
                dbsnp           =config["resources"]["dbsnp"],
                target_intervals=lambda wildcards: config['target_intervals'][config['sample_captures'][wildcards.sample][0]],
                batch           = config['platypus_clust']

        log :
                "{sample}.platypus.raw.vcf.log"
        shell: """
        module load platypus/{version}
	
	gawk '{{print $1 ":" $2 "-" $3}}' {params.target_intervals} > /project/scratch/target_intervals.txt
	platypus callVariants --nCPU=16 --bufferSize=1000000 --maxReads=100000000 --bamFiles={input.bam} --regions=/project/scratch/target_intervals.txt --output={output.vcf} --refFile={params.reference} --logFileName={log}
               """

rule mutect:
        input:
                lambda wildcards: somaticPairs[wildcards.somaticPair]
        output:
	        call_stats="{somaticPair}.mutect.call_stats.txt",
	        coverage="{somaticPair}.mutect.coverage.wig.txt",
	        vcf="{somaticPair}.mutect.raw.vcf"
        version:
                config['MuTect']
        params:
                rulename        ="MuTect",
                reference       =config['reference_fasta'][config['reference_name']],
                dbsnp           =config["resources"]["dbsnp"],
		cosmic		=config["resources"]["cosmic"],
                target_intervals=lambda wildcards: config['target_intervals'][PairsCapture[wildcards.somaticPair][0]],
                batch           = config['MuTect_clust']

        log :
                "{somaticPair}.mutect.raw.vcf.log"
        shell: """
        module load mutect/{version}
	
	gawk '{{print $1 "\t" $2-1 "\t" $3}}' {params.target_intervals} > /project/scratch/target_intervals.bed
	muTect --memory 40g --tmpdir /projects/scratch/ --analysis_type MuTect --reference_sequence {params.reference} --cosmic {params.cosmic} --dbsnp {params.dbsnp} --input_file:normal {input[0]} --input_file:tumor {input[2]} --out {output.call_stats} --coverage_file {output.coverage} --intervals /project/scratch/target_intervals.bed --vcf  {output.vcf} > {log} 2>&1  
               """


rule strelka:
        input:
                lambda wildcards: somaticPairs[wildcards.somaticPair]
        output:
	        snv_vcf="{somaticPair}.strelka.snvs.raw.vcf",
	        indel_vcf="{somaticPair}.strelka.indels.raw.vcf"
	version:
                config['Strelka']
	params:
        	rulename        ="Strelka",
        	reference       =config['reference_fasta'][config['reference_name']],
		strelka_config  =config['strelka_config'],
        	target_intervals=lambda wildcards: config['target_intervals'][PairsCapture[wildcards.somaticPair][0]],
        	batch           = config['Strelka_clust']
	log :
                "{somaticPair}.strelka.raw.vcf.log"
	shell: """
	module load strelka/{version}
	
	configureStrelkaWorkflow.pl --normal={input[0]} --tumor={input[2]} --ref={params.reference} --config={params.strelka_config} --output-dir=/project/scratch/strelka/ > {log} 2>&1
	
	make -j 16 -f /project/scratch/strelka/strelka/Makefile 2>> {log}

	vcftools --vcf /project/scratch/strelka/results/all.somatic.snvs.vcf --bed {params.target_intervals} --out {output.snv_vcf} --recode --keep-INFO-all
	mv {output.snv_vcf}.recode.vcf {output.snv_vcf}

	vcftools --vcf /project/scratch/strelka/results/all.somatic.indels.vcf --bed {params.target_intervals} --out {output.indel_vcf} --recode --keep-INFO-all
	mv {output.indel_vcf}.recode.vcf {output.indel_vcf}

               """
